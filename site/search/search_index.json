{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to aerocalc \u2708\ufe0f\ud83e\uddee documentation AeroCalc Aeronautical Engineering Calculations AeroCalc is a pure python package that performs various aeronautical engineering calculations. Currently it provides: airspeed conversions, static source error correction calculations standard atmosphere calculations and unit conversions. Original aerocalc: For original documentation visit kilohotel Homepage: https://kilohotel.com/python/aerocalc/ pypi website: https://pypi.python.org/pypi/AeroCalc/0.11 Installation \ud83d\udce5 Download the files https://github.com/chengdi123000/aerocalc/archive/v0.11-py3.tar.gz, decompress it and use setup.py to install. wget https://github.com/chengdi123000/aerocalc/archive/v0.11-py3.tar.gz tar xf v0.11-py3.tar.gz cd aerocalc-0.11-py3 python setup.py install Project layout . \u251c\u2500\u2500 aerocalc # Source code folder. \u2502 \u2514\u2500\u2500 tests \u251c\u2500\u2500 docs # The documentation directory. \u251c\u2500\u2500 htmlcov # Test coverage folder. \u251c\u2500\u2500 site # Documentation build for deployment. \u2502 \u251c\u2500\u2500 about \u2502 \u251c\u2500\u2500 css \u2502 \u251c\u2500\u2500 fonts \u2502 \u251c\u2500\u2500 img \u2502 \u251c\u2500\u2500 js \u2502 \u2514\u2500\u2500 search \u2514\u2500\u2500 venv # Your generated virtual environment. Testing \ud83e\uddea\ud83e\uddea The projects uses pytest and black as the formatting option. The tests also check for consistencies on code format. To initiate tests follow the steps below: Its advised to create a virtual environment virtualenv venv Activate the environent. For Linux/MacOS users use the command below source venv/bin/activate for windows users cd venv/Scripts activate.bat Install the requirements pip install -r requirements.txt Run the pytest command pytest The testing results will be displayed and there will also be a htmlcov folder generated inside the project that will contain the code coverage details. \u251c\u2500\u2500 aerocalc \u2502 \u251c\u2500\u2500 __pycache__ \u2502 \u2514\u2500\u2500 test \u251c\u2500\u2500 htmlcov \u2514\u2500\u2500 venv Open up the folder and open the index.html in your browser to see this information.","title":"Home"},{"location":"#welcome-to-aerocalc-documentation","text":"","title":"Welcome to aerocalc \u2708\ufe0f\ud83e\uddee documentation"},{"location":"#aerocalc-aeronautical-engineering-calculations","text":"AeroCalc is a pure python package that performs various aeronautical engineering calculations. Currently it provides: airspeed conversions, static source error correction calculations standard atmosphere calculations and unit conversions.","title":"AeroCalc Aeronautical Engineering Calculations"},{"location":"#original-aerocalc","text":"For original documentation visit kilohotel Homepage: https://kilohotel.com/python/aerocalc/ pypi website: https://pypi.python.org/pypi/AeroCalc/0.11","title":"Original aerocalc:"},{"location":"#installation","text":"Download the files https://github.com/chengdi123000/aerocalc/archive/v0.11-py3.tar.gz, decompress it and use setup.py to install. wget https://github.com/chengdi123000/aerocalc/archive/v0.11-py3.tar.gz tar xf v0.11-py3.tar.gz cd aerocalc-0.11-py3 python setup.py install","title":"Installation \ud83d\udce5"},{"location":"#project-layout","text":". \u251c\u2500\u2500 aerocalc # Source code folder. \u2502 \u2514\u2500\u2500 tests \u251c\u2500\u2500 docs # The documentation directory. \u251c\u2500\u2500 htmlcov # Test coverage folder. \u251c\u2500\u2500 site # Documentation build for deployment. \u2502 \u251c\u2500\u2500 about \u2502 \u251c\u2500\u2500 css \u2502 \u251c\u2500\u2500 fonts \u2502 \u251c\u2500\u2500 img \u2502 \u251c\u2500\u2500 js \u2502 \u2514\u2500\u2500 search \u2514\u2500\u2500 venv # Your generated virtual environment.","title":"Project layout"},{"location":"#testing","text":"The projects uses pytest and black as the formatting option. The tests also check for consistencies on code format. To initiate tests follow the steps below: Its advised to create a virtual environment virtualenv venv Activate the environent. For Linux/MacOS users use the command below source venv/bin/activate for windows users cd venv/Scripts activate.bat Install the requirements pip install -r requirements.txt Run the pytest command pytest The testing results will be displayed and there will also be a htmlcov folder generated inside the project that will contain the code coverage details. \u251c\u2500\u2500 aerocalc \u2502 \u251c\u2500\u2500 __pycache__ \u2502 \u2514\u2500\u2500 test \u251c\u2500\u2500 htmlcov \u2514\u2500\u2500 venv Open up the folder and open the index.html in your browser to see this information.","title":"Testing \ud83e\uddea\ud83e\uddea"},{"location":"airspeed/","text":"AIRSPEED MODULE INTRO: Perform various air speed conversions. Convert between Indicated Air Speed (IAS), Calibrated Air Speed (CAS), Equivalent Air Speed (EAS), True Air Speed (TAS) and mach number. Convert between pitot static system pressures and air speed. Provide interactive airspeed conversions when script is run directly, e.g. 'python airspeed.py'. default_area_units = \"ft**2\" default_power_units = \"hp\" default_speed_units = \"kt\" default_temp_units = \"C\" default_weight_units = \"lb\" default_press_units = \"in HG\" default_density_units = \"lb/ft**3\" default_length_units = \"ft\" default_avgas_units = \"lb\" P0 = 101325.0 # Pressure at sea level, pa # speed of sound from http://www.edwards.af.mil/sharing/tech_pubs/Handbook-10%20March02.pdf A0 = 340.2941 # speed of sound at sea level, std day, m/s F = (1.25 ** 2.5 \\* (2.4 ** 2.0) \\*_ 2.5) _ 1.2 # F calculated by manipulating NASA RP 1046 pg 17 # F is used in some of the supersonic solution equations. delta pressure to speed def _dp2speed( dp, Pref, Rhoref, press_units=default_press_units, speed_units=default_speed_units, ): ... return speed delta pressure to CAS Return the CAS for a given differential pressure (the difference between the pitot and static pressures). The pressure units may be in inches of HG, mm of HG, psi, lb/ft^2, hpa and mb. The units are specified as: 'in HG', 'mm HG', 'psi', 'lb/in**2', 'psf', 'lb/ft**2 'hpa', 'mb' or 'pa'. The speed units may be 'kt', 'mph', 'km/h', 'm/s' and 'ft/s'. def dp2cas(dp, press_units=default_press_units, speed_units=default_speed_units): \"\"\" If the units are not specified, the units in default_units.py are used. \"\"\" ... return cas Examples: Determine the CAS in kt that is equivalent to a differential pressure of 15 in HG: > dp2cas(15) 518.96637566127652 Determine the CAS in mph that is equivalent to a differential pressure of 0.2 psi: > dp2cas(.2, press_units = 'psi', speed_units = 'mph') 105.88275188221526 delta pressure and altitude to EAS Return the EAS for a given differential pressure (the difference between the pitot and static pressures) and altitude. The pressure units may be in inches of HG, mm of HG, psi, lb/ft^2, hpa and mb. The units are specified as: 'in HG', 'mm HG', 'psi', 'lb/in**2', 'psf', 'lb/ft**2 'hpa', 'mb' or 'pa'. The speed units may be 'kt', 'mph', 'km/h', 'm/s' and 'ft/s'. The altitude may be in feet ('ft'), metres ('m'), kilometres ('km'), statute miles, ('sm') or nautical miles ('nm'). def dp2eas( dp, altitude, press_units=default_press_units, speed_units=default_speed_units, alt_units=default_alt_units, ): \"\"\" If the units are not specified, the units in default_units.py are used. This first version only works for EAS < 661.48 kt. \"\"\" ... return eas delta pressure, altitude and temperature to TAS Return the TAS for a given differential pressure (the difference between the pitot and static pressures) and altitude. The pressure units may be in inches of HG, mm of HG, psi, lb/ft^2, hpa and mb. The units are specified as: 'in HG', 'mm HG', 'psi', 'lb/in**2', 'psf', 'lb/ft**2 'hpa', 'mb' or 'pa'. The speed units may be 'kt', 'mph', 'km/h', 'm/s' and 'ft/s'. The altitude may be in feet ('ft'), metres ('m'), kilometres ('km'), statute miles, ('sm') or nautical miles ('nm'). The temperature may be in deg C, F, K or R. def dp2tas( dp, altitude, temp, press_units=default_press_units, speed_units=default_speed_units, alt_units=default_alt_units, temp_units=default_temp_units, ): \"\"\" If the units are not specified, the units in default_units.py are used. This first version only works for TAS < 661.48 kt. \"\"\" ... return tas speed to delta pressure Return a delta pressure (the difference between the pitot and static pressures) for a given speed. Subsonic equation. def _speed2dp( speed, Pref, Rhoref, press_units=default_press_units, speed_units=default_speed_units, ): ... return dp Super CAS to delta pressure Return the differential pressure (difference between pitot and static pressures) for a given CAS. This function only works for the following conditions: - CAS > 661.48 kt - speed in m/s - pressure in pa. def _super_cas2dp(mcas: float) -> float: ... return dp CAS to delta pressure Converts calibrated airspeed to differential pressure (difference between pitot and static pressures) for a given CAS def cas2dp( cas, speed_units=default_speed_units, press_units=default_press_units ) -> float: \"\"\" Args: cas (float): calibrated airspeed speed_units (string, optional): kt', 'mph', 'km/h', 'm/s' or 'ft/s'. Defaults to default_speed_units. press_units (str, optional): inches of HG, mm of HG, psi, lb/ft^2, hpa and mb. The units are specified as: 'in HG', 'mm HG', 'psi','lb/in**2', 'psf', 'lb/ft**2 'hpa', 'mb' or 'pa'. Defaults to default_press_units. If the units are not specified, the units in default_units.py are used. \"\"\" ... return dp EAS and altitude to delta pressure Return the differential pressure (difference between pitot and static pressures) for a given EAS. The speed units may be 'kt', 'mph', 'km/h', 'm/s' and 'ft/s'. The pressure units may be in inches of HG, mm of HG, psi, lb/ft^2, hpa and mb. The units are specified as: 'in HG', 'mm HG', 'psi', 'lb/in**2', 'psf', 'lb/ft**2 'hpa', 'mb' or 'pa'. The altitude may be in feet ('ft'), metres ('m'), kilometres ('km'), statute miles, ('sm') or nautical miles ('nm'). def eas2dp( eas, altitude, speed_units=default_speed_units, alt_units=default_alt_units, press_units=default_press_units, ): \"\"\" If the units are not specified, the units in default_units.py are used. This first version only works for CAS < 661.48 kt. \"\"\" ... return dp TAS, altitude and temperature to delta pressure Return the differential pressure (difference between pitot and static pressures) for a given TAS. ```The speed units may be 'kt', 'mph', 'km/h', 'm/s' and 'ft/s'. The pressure units may be in inches of HG, mm of HG, psi, lb/ft^2, hpa and mb. The units are specified as: 'in HG', 'mm HG', 'psi', 'lb/in**2', 'psf', 'lb/ft**2 'hpa', 'mb' or 'pa'. The altitude may be in feet ('ft'), metres ('m'), kilometres ('km'), statute miles, ('sm') or nautical miles ('nm'). The temperature may be in deg C, F, K or R. ```python def tas2dp( tas, altitude, temp, speed_units=default_speed_units, alt_units=default_alt_units, temp_units=default_temp_units, press_units=default_press_units, ): \"\"\" If the units are not specified, the units in default_units.py are used. This first version only works for CAS < 661.48 kt. \"\"\" ... return dp CAS to EAS Return the EAS for a given CAS, pressure altitude and temperature. ```The speed units may be 'kt', 'mph', 'km/h', 'm/s' and 'ft/s'. The altitude may be in feet ('ft'), metres ('m'), kilometres ('km'), statute miles, ('sm') or nautical miles ('nm'). ```python def cas2eas( cas, altitude, speed_units=default_speed_units, alt_units=default_alt_units, ): \"\"\" If the units are not specified, the units in default_units.py are used. \"\"\" ... return eas interactive CAS to EAS Return the EAS for a given CAS, pressure altitude and temp, with interactive input from the user. def i_cas2eas(data_items): # version that goes interactive, if required ... print(return_string) CAS to TAS Return the TAS for a given CAS, pressure altitude and temperature. The speed units may be 'kt', 'mph', 'km/h', 'm/s' and 'ft/s'. The altitude may be in feet ('ft'), metres ('m'), kilometres ('km'), statute miles, ('sm') or nautical miles ('nm'). The temperature may be in deg C, F, K or R. The temperature defaults to std temperature if it is not input. def cas2tas( cas, altitude, temp=\"std\", speed_units=default_speed_units, alt_units=default_alt_units, temp_units=default_temp_units, ): \"\"\" If the units are not specified, the units in default_units.py are used. \"\"\" ... return tas interactive CAS to TAS Return the TAS for a given CAS, pressure altitude and temp, with interactive input from the user. def i_cas2tas(data_items): # version that goes interactive, if required ... print(return_string) EAS to TAS Return the TAS for a given EAS, pressure altitude and temperature. The speed units may be 'kt', 'mph', 'km/h', 'm/s' and 'ft/s'. The altitude may be in feet ('ft'), metres ('m'), kilometres ('km'), statute miles, ('sm') or nautical miles ('nm'). The temperature may be in deg C, F, K or R. The temperature defaults to std temperature if it is not input. def eas2tas( eas, altitude, temp=\"std\", speed_units=default_speed_units, alt_units=default_alt_units, temp_units=default_temp_units, ): \"\"\" If the units are not specified, the units in default_units.py are used. \"\"\" ... return tas interactive EAS to TAS Return the TAS for a given EAS, pressure altitude and temp, with interactive input from the user. def i_eas2tas(data_items): # version that goes interactive, if required ... print(return_string) EAS to CAS def eas2cas( eas, altitude, speed_units=default_speed_units, alt_units=default_alt_units, ): \"\"\" Return the CAS for a given EAS, pressure altitude and temperature. The speed units may be 'kt', 'mph', 'km/h', 'm/s' and 'ft/s'. The altitude may be in feet ('ft'), metres ('m'), kilometres ('km'), statute miles, ('sm') or nautical miles ('nm'). If the units are not specified, the default units in default_units.py are used. Examples: Determine equivalent Air Speed for 250 kt CAS at 10,000 ft: >>> cas2eas(250, 10000) 248.09577137102258 Determine equivalent Air Speed for 250 mph CAS at 10,000 ft: >>> cas2eas(250, 10000, speed_units = 'mph') 248.54048288757579 \"\"\" dp = eas2dp(eas, altitude, speed_units, alt_units) cas = dp2cas(dp, speed_units=speed_units) return cas interactive EAS to CAS def i_eas2cas(data_items): \"\"\" Return the CAS for a given EAS, pressure altitude, with interactive input from the user. The speed units may be 'kt', 'mph', 'km/h', 'm/s' and 'ft/s'. The altitude may be in feet ('ft'), metres ('m'), kilometres ('km'), statute miles, ('sm') or nautical miles ('nm'). If the units are not specified, the units in default_units.py are used. \"\"\" data_items[\"eas\"] = _get_EAS(data_items) eas = data_items[\"eas\"] data_items[\"speed_units\"] = _get_speed_units(data_items) speed_units = data_items[\"speed_units\"] data_items[\"altitude\"] = _get_alt(data_items) altitude = data_items[\"altitude\"] data_items[\"alt_units\"] = _get_alt_units(data_items) alt_units = data_items[\"alt_units\"] print() print(\"EAS = \", eas, speed_units) print(\"Altitude = \", altitude, alt_units) print() cas = eas2cas(eas, altitude, speed_units, alt_units) data_items[\"cas\"] = cas return_string = \"CAS = \" + str(cas) + \" \" + speed_units print(return_string) TAS to CAS def tas2cas( tas, altitude, temp=\"std\", speed_units=default_speed_units, alt_units=default_alt_units, temp_units=default_temp_units, ): \"\"\" Return the CAS for a given TAS, pressure altitude and temperature. The speed units may be 'kt', 'mph', 'km/h', 'm/s' and 'ft/s'. The altitude may be in feet ('ft'), metres ('m'), kilometres ('km'), statute miles, ('sm') or nautical miles ('nm'). The temperature may be in deg C, F, K or R. The temperature defaults to std temperature if it is not input. If the units are not specified, the units in default_units.py are used. Examples: Determine the true Air Speed for 250 kt CAS at 10,000 ft with standard temperature: >>> cas2tas(250, 10000) 288.70227231079861 Determine the true Air Speed for 250 mph CAS at 10,000 ft with standard temperature: >>> cas2tas(250, 10000, speed_units = 'mph') 289.21977095514148 Determine the true Air Speed for 250 mph CAS at 10,000 ft with temperature of 0 deg C: >>> cas2tas(250, 10000, 0, speed_units = 'mph') 291.80148048806217 Determine the true Air Speed for 250 mph CAS at 10,000 ft with temperature of 0 deg F: >>> cas2tas(250, 10000, 0, speed_units = 'mph', temp_units = 'F') 282.14588227473797 \"\"\" if temp == \"std\": temp = SA.alt2temp(altitude, temp_units=temp_units, alt_units=alt_units) dp = tas2dp( tas, altitude, temp, speed_units, alt_units=alt_units, temp_units=temp_units, ) cas = dp2cas(dp, speed_units=speed_units) return cas interactive TAS to CAS def i_tas2cas(data_items): \"\"\" Return the CAS for a given TAS, pressure altitude and temp, with interactive input from the user. The speed units may be 'kt', 'mph', 'km/h', 'm/s' and 'ft/s'. The altitude may be in feet ('ft'), metres ('m'), kilometres ('km'), statute miles, ('sm') or nautical miles ('nm'). The temperature may be in deg C, F, K or R. The temperature defaults to std temperature if it is not input. If the units are not specified, the units in default_units.py are used. \"\"\" data_items[\"tas\"] = _get_TAS(data_items) tas = data_items[\"tas\"] data_items[\"speed_units\"] = _get_speed_units(data_items) speed_units = data_items[\"speed_units\"] data_items[\"altitude\"] = _get_alt(data_items) altitude = data_items[\"altitude\"] data_items[\"alt_units\"] = _get_alt_units(data_items) alt_units = data_items[\"alt_units\"] data_items[\"temp_units\"] = _get_temp_units(data_items) temp_units = data_items[\"temp_units\"] data_items[\"temp\"] = _get_temp(data_items) temp = data_items[\"temp\"] print() print(\"TAS = \", tas, speed_units) print(\"Altitude = \", altitude, alt_units) print(\"Temperature = \", temp, \"deg\", temp_units) print() cas = tas2cas(tas, altitude, temp, speed_units, alt_units, temp_units,) data_items[\"cas\"] = cas return_string = \"CAS = \" + str(cas) + \" \" + speed_units print(return_string) TAS to EAS def tas2eas( tas, altitude, temp=\"std\", speed_units=default_speed_units, alt_units=default_alt_units, temp_units=default_temp_units, ): \"\"\" Return the EAS for a given TAS, pressure altitude and temperature. The speed units may be 'kt', 'mph', 'km/h', 'm/s' and 'ft/s'. The altitude may be in feet ('ft'), metres ('m'), kilometres ('km'), statute miles, ('sm') or nautical miles ('nm'). The temperature may be in deg C, F, K or R. The temperature defaults to std temperature if it is not input. If the units are not specified, the units in default_units.py are used. \"\"\" if temp == \"std\": temp = SA.alt2temp(altitude, temp_units=temp_units, alt_units=alt_units) dp = tas2dp( tas, altitude, temp, speed_units, alt_units=alt_units, temp_units=temp_units, ) eas = dp2eas(dp, altitude, alt_units=alt_units, speed_units=speed_units) return eas interactive TAS to EAS def i_tas2eas(data_items): \"\"\" Return the EAS for a given TAS, pressure altitude and temp, with interactive input from the user. The speed units may be 'kt', 'mph', 'km/h', 'm/s' and 'ft/s'. The altitude may be in feet ('ft'), metres ('m'), kilometres ('km'), statute miles, ('sm') or nautical miles ('nm'). The temperature may be in deg C, F, K or R. The temperature defaults to std temperature if it is not input. If the units are not specified, the units in default_units.py are used. \"\"\" data_items[\"tas\"] = _get_TAS(data_items) tas = data_items[\"tas\"] data_items[\"speed_units\"] = _get_speed_units(data_items) speed_units = data_items[\"speed_units\"] data_items[\"altitude\"] = _get_alt(data_items) altitude = data_items[\"altitude\"] data_items[\"alt_units\"] = _get_alt_units(data_items) alt_units = data_items[\"alt_units\"] data_items[\"temp_units\"] = _get_temp_units(data_items) temp_units = data_items[\"temp_units\"] data_items[\"temp\"] = _get_temp(data_items) temp = data_items[\"temp\"] print() print(\"TAS = \", tas, speed_units) print(\"Altitude = \", altitude, alt_units) print(\"Temperature = \", temp, \"deg\", temp_units) print() eas = tas2eas(tas, altitude, temp, speed_units, alt_units, temp_units,) data_items[\"eas\"] = eas return_string = \"EAS = \" + str(eas) + \" \" + speed_units print(return_string) delta p over p to Mach def dp_over_p2mach(dp_over_p): \"\"\" Return the mach number for a given delta p over p. Mach must be less than or equal to 10. \"\"\" # mach = (5*( (dp_over_p + 1)**(2/7.) -1) )**0.5 mach = M.sqrt(5.0 * ((dp_over_p + 1.0) ** (2.0 / 7.0) - 1.0)) if mach <= 1.0: return mach else: # supersonic case - need to iterate a solution. Set upper and lower # guesses, and iterate until we zero in on a mach that produces the # desired result. dp_over_p_seek = dp_over_p low = 1.0 # initial lower guess for mach # This function works up to Mach 10 The upper limit can be # extended by increasing the value of the initial upper guess # (\"high\"). high = 10 # initial upper guess for mach # confirm initial low and high are OK: dp_over_p_low = mach2dp_over_p(low) if dp_over_p_low > dp_over_p_seek: raise ValueError(\"Initial lower mach guess is too high.\") dp_over_p_high = mach2dp_over_p(high) if dp_over_p_high < dp_over_p_seek: raise ValueError(\"Initial upper mach guess is too low.\") guess = (low + high) / 2.0 dp_over_p_guess = mach2dp_over_p(guess) # keep iterating until dp is within 0.001% of desired value while M.fabs(dp_over_p_guess - dp_over_p_seek) / dp_over_p_seek > 1e-5: if dp_over_p_guess > dp_over_p_seek: high = guess else: low = guess guess = (low + high) / 2.0 dp_over_p_guess = mach2dp_over_p(guess) return guess Mach to delta p over p def mach2dp_over_p(M): \"\"\" Return the delta p over p for a given mach number. The result is equal to: (pitot pressure - static pressure) / static pressure Example - determine the delta p over p at mach 0.4: >>> mach2dp_over_p(.4) 0.11655196580975336 \"\"\" if M <= 1.0: dp_over_p = (M ** 2.0 / 5.0 + 1.0) ** 3.5 - 1.0 else: dp_over_p = (F * M ** 7.0) / (7.0 * M ** 2.0 - 1.0) ** 2.5 - 1.0 return dp_over_p conversions between cas, mach and altitude NB: pick any two values, and find the third def cas_mach2alt( cas, mach, speed_units=default_speed_units, alt_units=default_alt_units, ): \"\"\" Return the altitude that corresponds to a given CAS and mach. The speed units may be 'kt', 'mph', 'km/h', 'm/s' and 'ft/s'. The altitude may be in feet ('ft'), metres ('m'), kilometres ('km'), statute miles, ('sm') or nautical miles ('nm'). If the units are not specified, the units in default_units.py are used. \"\"\" dp = cas2dp(cas, speed_units=speed_units, press_units=\"pa\") dp_over_p = mach2dp_over_p(mach) p = dp / dp_over_p altitude = SA.press2alt(p, press_units=\"pa\", alt_units=alt_units) return altitude def i_cas_mach2alt(data_items): \"\"\" Return the altitude that corresponds to a given CAS and mach, with an interactive interface. \"\"\" data_items[\"cas\"] = _get_CAS(data_items) cas = data_items[\"cas\"] data_items[\"speed_units\"] = _get_speed_units(data_items) speed_units = data_items[\"speed_units\"] data_items[\"mach\"] = _get_mach(data_items) mach = data_items[\"mach\"] data_items[\"alt_units\"] = _get_alt_units(data_items) alt_units = data_items[\"alt_units\"] print() print(\"CAS = \", cas, speed_units) print(\"Mach = \", mach) # print 'Desired altitude units are: ', alt_units print() alt = cas_mach2alt(cas, mach, speed_units, alt_units) data_items[\"altitude\"] = alt return_string = \"Altitude = \" + str(alt) + \" \" + alt_units print(return_string) def cas_alt2mach( cas, altitude, speed_units=default_speed_units, alt_units=default_alt_units, ): \"\"\" Return the mach that corresponds to a given CAS and altitude. The speed units may be 'kt', 'mph', 'km/h', 'm/s' and 'ft/s'. The altitude may be in feet ('ft'), metres ('m'), kilometres ('km'), statute miles, ('sm') or nautical miles ('nm'). If the units are not specified, the units in default_units.py are used. \"\"\" dp = cas2dp(cas, speed_units=speed_units, press_units=\"pa\") p = SA.alt2press(altitude, alt_units=alt_units, press_units=\"pa\") dp_over_p = dp / p mach = dp_over_p2mach(dp_over_p) return mach def i_cas_alt2mach(data_items): \"\"\" Return the mach that corresponds to a given CAS and altitude, using an interactive interface. \"\"\" data_items[\"cas\"] = _get_CAS(data_items) cas = data_items[\"cas\"] data_items[\"speed_units\"] = _get_speed_units(data_items) speed_units = data_items[\"speed_units\"] data_items[\"altitude\"] = _get_alt(data_items) altitude = data_items[\"altitude\"] data_items[\"alt_units\"] = _get_alt_units(data_items) alt_units = data_items[\"alt_units\"] print() print(\"CAS = \", cas, speed_units) print(\"Altitude = \", altitude, alt_units) print() mach = cas_alt2mach(cas, altitude, speed_units, alt_units) data_items[\"mach\"] = mach print(\"Mach = \", mach) def \\_cas_alt2mach2( cas, altitude, speed_units=default_speed_units, alt_units=default_alt_units, ): \"\"\" Alternative, trial variant of cas_alt2mach, using the equations from USAF TPS notes. The speed units may be 'kt', 'mph', 'km/h', 'm/s' and 'ft/s'. The altitude may be in feet ('ft'), metres ('m'), kilometres ('km'), statute miles, ('sm') or nautical miles ('nm'). If the units are not specified, the units in default_units.py are used. \"\"\" PR = SA.alt2press_ratio(altitude, alt_units) cas = U.speed_conv(cas, from_units=speed_units, to_units=\"m/s\") if cas <= A0: # <= 661.48 kt mach = M.sqrt( 5.0 * ( ((1.0 / PR) * ((1.0 + 0.2 * (cas / A0) ** 2.0) ** 3.5 - 1.0) + 1.0) ** (2.0 / 7.0) - 1.0 ) ) else: raise ValueError(\"CAS too high.\") return mach def mach_alt2cas( mach, altitude, alt_units=default_alt_units, speed_units=default_speed_units, ): \"\"\" Return the calibrated Air Speed that corresponds to a given mach and altitude. The speed units may be 'kt', 'mph', 'km/h', 'm/s' and 'ft/s'. The altitude may be in feet ('ft'), metres ('m'), kilometres ('km'), statute miles, ('sm') or nautical miles ('nm'). If the units are not specified, the units in default_units.py are used. \"\"\" p = SA.alt2press(altitude, alt_units=alt_units, press_units=\"pa\") dp_over_p = mach2dp_over_p(mach) dp = dp_over_p * p cas = dp2cas(dp, press_units=\"pa\", speed_units=speed_units) return cas def i_mach_alt2cas(data_items): \"\"\" Return the calibrated Air Speed that corresponds to a given mach and altitude, using an interactive interface. \"\"\" data_items[\"mach\"] = _get_mach(data_items) mach = data_items[\"mach\"] data_items[\"altitude\"] = _get_alt(data_items) altitude = data_items[\"altitude\"] data_items[\"alt_units\"] = _get_alt_units(data_items) alt_units = data_items[\"alt_units\"] data_items[\"speed_units\"] = _get_speed_units(data_items) speed_units = data_items[\"speed_units\"] print() print(\"Altitude = \", altitude, alt_units) print(\"Mach = \", mach) print() cas = mach_alt2cas(mach, altitude, alt_units, speed_units) data_items[\"cas\"] = cas return_string = \"CAS = \" + str(cas) + \" \" + speed_units print(return_string) Mach and temperature to TAS def mach2tas( mach, temp=\"std\", altitude=\"blank\", temp_units=default_temp_units, alt_units=default_alt_units, speed_units=default_speed_units, ): \"\"\" Return the TAS for a given mach number. The temperature or altitude must also be specified. If the altitude is specified, the temperature is assumed to be standard. If both the altitude and temperature are specified, the altitude input is ignored. The speed units may be 'kt', 'mph', 'km/h', 'm/s' and 'ft/s'. The altitude may be in feet ('ft'), metres ('m'), kilometres ('km'), statute miles, ('sm') or nautical miles ('nm'). The temperature may be in deg C, F, K or R. The temperature defaults to std temperature if it is not input. If the units are not specified, the units in default_units.py are used. Examples: Determine the TAS in kt at 0.8 mach at a temperature of -15 deg C: >>> mach2tas(0.8, -15) 500.87884108468597 Determine the TAS in kt at 0.8 mach at 30,000 ft, assuming standard temperature: >>> mach2tas(0.8, altitude = 30000) 471.45798523415107 Determine the TAS in mph at 0.8 mach at 5000 m, assuming standard temperature: >>> mach2tas(0.8, altitude = 5000, alt_units = 'm', speed_units = 'mph') 573.60326790383715 Determine the TAS in km/h at 0.4 mach at a temperature of 300 deg K: >>> mach2tas(0.4, 300, temp_units = 'K', speed_units = 'km/h') 499.99796329569176 \"\"\" if temp == \"std\": if altitude != \"blank\": temp = SA.alt2temp(altitude, temp_units=temp_units, alt_units=alt_units) else: raise ValueError( \"At least one of the temperature or altitude must be specified.\" ) tas = mach * SA.temp2speed_of_sound(temp, temp_units, speed_units) return tas interactive Mach and temperature to TAS def i_mach2tas(data_items): \"\"\" Return the TAS that corresponds to a given Mach, altitude, and temperature using an interactive interface. \"\"\" data_items[\"mach\"] = _get_mach(data_items) mach = data_items[\"mach\"] data_items[\"altitude\"] = _get_alt(data_items) altitude = data_items[\"altitude\"] data_items[\"alt_units\"] = _get_alt_units(data_items) alt_units = data_items[\"alt_units\"] data_items[\"temp_units\"] = _get_temp_units(data_items) temp_units = data_items[\"temp_units\"] data_items[\"temp\"] = _get_temp(data_items) temp = data_items[\"temp\"] data_items[\"speed_units\"] = _get_speed_units(data_items) speed_units = data_items[\"speed_units\"] print() print(\"Mach = \", mach) print(\"Altitude = \", altitude, alt_units) print(\"Temperature =\", temp, temp_units) print() tas = mach2tas(mach, temp, altitude, temp_units, alt_units, speed_units,) data_items[\"tas\"] = tas print(\"TAS = \", tas, speed_units) TAS and temperature to Mach def tas2mach( tas, temp=\"std\", altitude=\"blank\", temp_units=default_temp_units, alt_units=default_alt_units, speed_units=default_speed_units, ): \"\"\" Return the mach number for a given TAS. The temperature or altitude must also be specified. If the altitude is specified, the temperature is assumed to be standard. If both the altitude and temperature are specified, the altitude input is ignored. The speed units may be 'kt', 'mph', 'km/h', 'm/s' and 'ft/s'. The altitude may be in feet ('ft'), metres ('m'), kilometres ('km'), statute miles, ('sm') or nautical miles ('nm'). The temperature may be in deg C, F, K or R. The temperature defaults to std temperature if it is not input. If the units are not specified, the units in default_units.py are used. Examples: Determine the mach number for a TAS of 500 kt at a temperature of -15 deg C: >>> tas2mach(500, -15) 0.79859632148519943 Determine the mach number for a TAS of 500 kt at a temperature of 0 deg F: >>> tas2mach(500, 0, temp_units = 'F') 0.80292788758764277 Determine the mach number for a TAS of 500 kt at an altitude of 10,000 ft, assuming standard temperature: >>> tas2mach(500, altitude = 10000) 0.78328945665870209 Determine the mach number for a TAS of 400 mph at an altitude of 5000 m, assuming standard temperature: >>> tas2mach(400, altitude = 5000, speed_units = 'mph', alt_units = 'm') 0.55787687746166581 \"\"\" if temp == \"std\": if altitude != \"blank\": temp = SA.alt2temp(altitude, temp_units=temp_units, alt_units=alt_units) else: raise ValueError( \"At least one of the temperature or altitude must be specified.\" ) mach = tas / SA.temp2speed_of_sound(temp, temp_units, speed_units) return mach interactive TAS and temperature to Mach def i_tas2mach(data_items): \"\"\" Return the mach that corresponds to a given TAS, altitude, and temperature using an interactive interface. \"\"\" data_items[\"tas\"] = _get_TAS(data_items) tas = data_items[\"tas\"] data_items[\"speed_units\"] = _get_speed_units(data_items) speed_units = data_items[\"speed_units\"] data_items[\"altitude\"] = _get_alt(data_items) altitude = data_items[\"altitude\"] data_items[\"alt_units\"] = _get_alt_units(data_items) alt_units = data_items[\"alt_units\"] data_items[\"temp_units\"] = _get_temp_units(data_items) temp_units = data_items[\"temp_units\"] data_items[\"temp\"] = _get_temp(data_items) temp = data_items[\"temp\"] print() print(\"TAS = \", tas, speed_units) print(\"Altitude = \", altitude, alt_units) print(\"Temperature =\", temp, temp_units) print() mach = tas2mach(tas, temp, altitude, temp_units, alt_units, speed_units,) data_items[\"mach\"] = mach print(\"Mach = \", mach) Ram temperature rise calculations Mach and indicated temperature to ambient temperature def mach2temp( mach, indicated_temp, recovery_factor, temp_units=default_temp_units, ): \"\"\" Return the ambient temp, given the mach number, indicated temperature and the temperature probe's recovery factor. The temperature may be in deg C, F, K or R. If the units are not specified, the units in default_units.py are used. Examples: Determine the ambient temperature with an indicated temperature of -20 deg C at mach 0.6 with a probe recovery factor of 0.8: >>> mach2temp(0.6, -20, 0.8) -33.787291981845698 Determine the ambient temperature with an indicated temperature of 75 deg F at mach 0.3 with a probe recovery factor of 0.9: >>> mach2temp(0.3, 75, 0.9, temp_units = 'F') 66.476427868529839 \"\"\" indicated_temp = U.temp_conv(indicated_temp, from_units=temp_units, to_units=\"K\") ambient_temp = indicated_temp / (1.0 + (0.2 * recovery_factor) * mach ** 2.0) ambient_temp = U.temp_conv(ambient_temp, from_units=\"K\", to_units=temp_units) return ambient_temp TAS and indicated temperature to ambient temperature def tas2temp( tas, indicated_temp, recovery_factor, speed_units=default_speed_units, temp_units=default_temp_units, ): \"\"\" Return the ambient temp, given the TAS, indicated temperature and the temperature probe's recovery factor. The speed units may be 'kt', 'mph', 'km/h', 'm/s' and 'ft/s'. The temperature may be in deg C, F, K or R. The temperature defaults to std temperature if it is not input. If the units are not specified, the units in default_units.py are used. \"\"\" indicated_temp = U.temp_conv(indicated_temp, from_units=temp_units, to_units=\"K\") tas = U.speed_conv(tas, from_units=speed_units, to_units=\"kt\") # value 7592.4732909142658 was adjusted to make the result equal that # obtained using mach2temp ambient_temp = indicated_temp - (recovery_factor * tas ** 2.0) / 7592.4732909142658 ambient_temp = U.temp_conv(ambient_temp, from_units=\"K\", to_units=temp_units) return ambient_temp","title":"Airspeed Calculations"},{"location":"airspeed/#airspeed-module","text":"INTRO: Perform various air speed conversions. Convert between Indicated Air Speed (IAS), Calibrated Air Speed (CAS), Equivalent Air Speed (EAS), True Air Speed (TAS) and mach number. Convert between pitot static system pressures and air speed. Provide interactive airspeed conversions when script is run directly, e.g. 'python airspeed.py'. default_area_units = \"ft**2\" default_power_units = \"hp\" default_speed_units = \"kt\" default_temp_units = \"C\" default_weight_units = \"lb\" default_press_units = \"in HG\" default_density_units = \"lb/ft**3\" default_length_units = \"ft\" default_avgas_units = \"lb\" P0 = 101325.0 # Pressure at sea level, pa # speed of sound from http://www.edwards.af.mil/sharing/tech_pubs/Handbook-10%20March02.pdf A0 = 340.2941 # speed of sound at sea level, std day, m/s F = (1.25 ** 2.5 \\* (2.4 ** 2.0) \\*_ 2.5) _ 1.2 # F calculated by manipulating NASA RP 1046 pg 17 # F is used in some of the supersonic solution equations.","title":"AIRSPEED MODULE"},{"location":"airspeed/#delta-pressure-to-speed","text":"def _dp2speed( dp, Pref, Rhoref, press_units=default_press_units, speed_units=default_speed_units, ): ... return speed","title":"delta pressure to speed"},{"location":"airspeed/#delta-pressure-to-cas","text":"Return the CAS for a given differential pressure (the difference between the pitot and static pressures). The pressure units may be in inches of HG, mm of HG, psi, lb/ft^2, hpa and mb. The units are specified as: 'in HG', 'mm HG', 'psi', 'lb/in**2', 'psf', 'lb/ft**2 'hpa', 'mb' or 'pa'. The speed units may be 'kt', 'mph', 'km/h', 'm/s' and 'ft/s'. def dp2cas(dp, press_units=default_press_units, speed_units=default_speed_units): \"\"\" If the units are not specified, the units in default_units.py are used. \"\"\" ... return cas","title":"delta pressure to CAS"},{"location":"airspeed/#examples","text":"Determine the CAS in kt that is equivalent to a differential pressure of 15 in HG: > dp2cas(15) 518.96637566127652 Determine the CAS in mph that is equivalent to a differential pressure of 0.2 psi: > dp2cas(.2, press_units = 'psi', speed_units = 'mph') 105.88275188221526","title":"Examples:"},{"location":"airspeed/#delta-pressure-and-altitude-to-eas","text":"Return the EAS for a given differential pressure (the difference between the pitot and static pressures) and altitude. The pressure units may be in inches of HG, mm of HG, psi, lb/ft^2, hpa and mb. The units are specified as: 'in HG', 'mm HG', 'psi', 'lb/in**2', 'psf', 'lb/ft**2 'hpa', 'mb' or 'pa'. The speed units may be 'kt', 'mph', 'km/h', 'm/s' and 'ft/s'. The altitude may be in feet ('ft'), metres ('m'), kilometres ('km'), statute miles, ('sm') or nautical miles ('nm'). def dp2eas( dp, altitude, press_units=default_press_units, speed_units=default_speed_units, alt_units=default_alt_units, ): \"\"\" If the units are not specified, the units in default_units.py are used. This first version only works for EAS < 661.48 kt. \"\"\" ... return eas","title":"delta pressure and altitude to EAS"},{"location":"airspeed/#delta-pressure-altitude-and-temperature-to-tas","text":"Return the TAS for a given differential pressure (the difference between the pitot and static pressures) and altitude. The pressure units may be in inches of HG, mm of HG, psi, lb/ft^2, hpa and mb. The units are specified as: 'in HG', 'mm HG', 'psi', 'lb/in**2', 'psf', 'lb/ft**2 'hpa', 'mb' or 'pa'. The speed units may be 'kt', 'mph', 'km/h', 'm/s' and 'ft/s'. The altitude may be in feet ('ft'), metres ('m'), kilometres ('km'), statute miles, ('sm') or nautical miles ('nm'). The temperature may be in deg C, F, K or R. def dp2tas( dp, altitude, temp, press_units=default_press_units, speed_units=default_speed_units, alt_units=default_alt_units, temp_units=default_temp_units, ): \"\"\" If the units are not specified, the units in default_units.py are used. This first version only works for TAS < 661.48 kt. \"\"\" ... return tas","title":"delta pressure, altitude and temperature to TAS"},{"location":"airspeed/#speed-to-delta-pressure","text":"Return a delta pressure (the difference between the pitot and static pressures) for a given speed. Subsonic equation. def _speed2dp( speed, Pref, Rhoref, press_units=default_press_units, speed_units=default_speed_units, ): ... return dp","title":"speed to delta pressure"},{"location":"airspeed/#super-cas-to-delta-pressure","text":"Return the differential pressure (difference between pitot and static pressures) for a given CAS. This function only works for the following conditions: - CAS > 661.48 kt - speed in m/s - pressure in pa. def _super_cas2dp(mcas: float) -> float: ... return dp","title":"Super CAS to delta pressure"},{"location":"airspeed/#cas-to-delta-pressure","text":"Converts calibrated airspeed to differential pressure (difference between pitot and static pressures) for a given CAS def cas2dp( cas, speed_units=default_speed_units, press_units=default_press_units ) -> float: \"\"\" Args: cas (float): calibrated airspeed speed_units (string, optional): kt', 'mph', 'km/h', 'm/s' or 'ft/s'. Defaults to default_speed_units. press_units (str, optional): inches of HG, mm of HG, psi, lb/ft^2, hpa and mb. The units are specified as: 'in HG', 'mm HG', 'psi','lb/in**2', 'psf', 'lb/ft**2 'hpa', 'mb' or 'pa'. Defaults to default_press_units. If the units are not specified, the units in default_units.py are used. \"\"\" ... return dp","title":"CAS to delta pressure"},{"location":"airspeed/#eas-and-altitude-to-delta-pressure","text":"Return the differential pressure (difference between pitot and static pressures) for a given EAS. The speed units may be 'kt', 'mph', 'km/h', 'm/s' and 'ft/s'. The pressure units may be in inches of HG, mm of HG, psi, lb/ft^2, hpa and mb. The units are specified as: 'in HG', 'mm HG', 'psi', 'lb/in**2', 'psf', 'lb/ft**2 'hpa', 'mb' or 'pa'. The altitude may be in feet ('ft'), metres ('m'), kilometres ('km'), statute miles, ('sm') or nautical miles ('nm'). def eas2dp( eas, altitude, speed_units=default_speed_units, alt_units=default_alt_units, press_units=default_press_units, ): \"\"\" If the units are not specified, the units in default_units.py are used. This first version only works for CAS < 661.48 kt. \"\"\" ... return dp","title":"EAS and altitude to delta pressure"},{"location":"airspeed/#tas-altitude-and-temperature-to-delta-pressure","text":"Return the differential pressure (difference between pitot and static pressures) for a given TAS. ```The speed units may be 'kt', 'mph', 'km/h', 'm/s' and 'ft/s'. The pressure units may be in inches of HG, mm of HG, psi, lb/ft^2, hpa and mb. The units are specified as: 'in HG', 'mm HG', 'psi', 'lb/in**2', 'psf', 'lb/ft**2 'hpa', 'mb' or 'pa'. The altitude may be in feet ('ft'), metres ('m'), kilometres ('km'), statute miles, ('sm') or nautical miles ('nm'). The temperature may be in deg C, F, K or R. ```python def tas2dp( tas, altitude, temp, speed_units=default_speed_units, alt_units=default_alt_units, temp_units=default_temp_units, press_units=default_press_units, ): \"\"\" If the units are not specified, the units in default_units.py are used. This first version only works for CAS < 661.48 kt. \"\"\" ... return dp","title":"TAS, altitude and temperature to delta pressure"},{"location":"airspeed/#cas-to-eas","text":"Return the EAS for a given CAS, pressure altitude and temperature. ```The speed units may be 'kt', 'mph', 'km/h', 'm/s' and 'ft/s'. The altitude may be in feet ('ft'), metres ('m'), kilometres ('km'), statute miles, ('sm') or nautical miles ('nm'). ```python def cas2eas( cas, altitude, speed_units=default_speed_units, alt_units=default_alt_units, ): \"\"\" If the units are not specified, the units in default_units.py are used. \"\"\" ... return eas","title":"CAS to EAS"},{"location":"airspeed/#interactive-cas-to-eas","text":"Return the EAS for a given CAS, pressure altitude and temp, with interactive input from the user. def i_cas2eas(data_items): # version that goes interactive, if required ... print(return_string)","title":"interactive CAS to EAS"},{"location":"airspeed/#cas-to-tas","text":"Return the TAS for a given CAS, pressure altitude and temperature. The speed units may be 'kt', 'mph', 'km/h', 'm/s' and 'ft/s'. The altitude may be in feet ('ft'), metres ('m'), kilometres ('km'), statute miles, ('sm') or nautical miles ('nm'). The temperature may be in deg C, F, K or R. The temperature defaults to std temperature if it is not input. def cas2tas( cas, altitude, temp=\"std\", speed_units=default_speed_units, alt_units=default_alt_units, temp_units=default_temp_units, ): \"\"\" If the units are not specified, the units in default_units.py are used. \"\"\" ... return tas","title":"CAS to TAS"},{"location":"airspeed/#interactive-cas-to-tas","text":"Return the TAS for a given CAS, pressure altitude and temp, with interactive input from the user. def i_cas2tas(data_items): # version that goes interactive, if required ... print(return_string)","title":"interactive CAS to TAS"},{"location":"airspeed/#eas-to-tas","text":"Return the TAS for a given EAS, pressure altitude and temperature. The speed units may be 'kt', 'mph', 'km/h', 'm/s' and 'ft/s'. The altitude may be in feet ('ft'), metres ('m'), kilometres ('km'), statute miles, ('sm') or nautical miles ('nm'). The temperature may be in deg C, F, K or R. The temperature defaults to std temperature if it is not input. def eas2tas( eas, altitude, temp=\"std\", speed_units=default_speed_units, alt_units=default_alt_units, temp_units=default_temp_units, ): \"\"\" If the units are not specified, the units in default_units.py are used. \"\"\" ... return tas","title":"EAS to TAS"},{"location":"airspeed/#interactive-eas-to-tas","text":"Return the TAS for a given EAS, pressure altitude and temp, with interactive input from the user. def i_eas2tas(data_items): # version that goes interactive, if required ... print(return_string)","title":"interactive EAS to TAS"},{"location":"airspeed/#eas-to-cas","text":"def eas2cas( eas, altitude, speed_units=default_speed_units, alt_units=default_alt_units, ): \"\"\" Return the CAS for a given EAS, pressure altitude and temperature. The speed units may be 'kt', 'mph', 'km/h', 'm/s' and 'ft/s'. The altitude may be in feet ('ft'), metres ('m'), kilometres ('km'), statute miles, ('sm') or nautical miles ('nm'). If the units are not specified, the default units in default_units.py are used. Examples: Determine equivalent Air Speed for 250 kt CAS at 10,000 ft: >>> cas2eas(250, 10000) 248.09577137102258 Determine equivalent Air Speed for 250 mph CAS at 10,000 ft: >>> cas2eas(250, 10000, speed_units = 'mph') 248.54048288757579 \"\"\" dp = eas2dp(eas, altitude, speed_units, alt_units) cas = dp2cas(dp, speed_units=speed_units) return cas","title":"EAS to CAS"},{"location":"airspeed/#interactive-eas-to-cas","text":"def i_eas2cas(data_items): \"\"\" Return the CAS for a given EAS, pressure altitude, with interactive input from the user. The speed units may be 'kt', 'mph', 'km/h', 'm/s' and 'ft/s'. The altitude may be in feet ('ft'), metres ('m'), kilometres ('km'), statute miles, ('sm') or nautical miles ('nm'). If the units are not specified, the units in default_units.py are used. \"\"\" data_items[\"eas\"] = _get_EAS(data_items) eas = data_items[\"eas\"] data_items[\"speed_units\"] = _get_speed_units(data_items) speed_units = data_items[\"speed_units\"] data_items[\"altitude\"] = _get_alt(data_items) altitude = data_items[\"altitude\"] data_items[\"alt_units\"] = _get_alt_units(data_items) alt_units = data_items[\"alt_units\"] print() print(\"EAS = \", eas, speed_units) print(\"Altitude = \", altitude, alt_units) print() cas = eas2cas(eas, altitude, speed_units, alt_units) data_items[\"cas\"] = cas return_string = \"CAS = \" + str(cas) + \" \" + speed_units print(return_string)","title":"interactive EAS to CAS"},{"location":"airspeed/#tas-to-cas","text":"def tas2cas( tas, altitude, temp=\"std\", speed_units=default_speed_units, alt_units=default_alt_units, temp_units=default_temp_units, ): \"\"\" Return the CAS for a given TAS, pressure altitude and temperature. The speed units may be 'kt', 'mph', 'km/h', 'm/s' and 'ft/s'. The altitude may be in feet ('ft'), metres ('m'), kilometres ('km'), statute miles, ('sm') or nautical miles ('nm'). The temperature may be in deg C, F, K or R. The temperature defaults to std temperature if it is not input. If the units are not specified, the units in default_units.py are used. Examples: Determine the true Air Speed for 250 kt CAS at 10,000 ft with standard temperature: >>> cas2tas(250, 10000) 288.70227231079861 Determine the true Air Speed for 250 mph CAS at 10,000 ft with standard temperature: >>> cas2tas(250, 10000, speed_units = 'mph') 289.21977095514148 Determine the true Air Speed for 250 mph CAS at 10,000 ft with temperature of 0 deg C: >>> cas2tas(250, 10000, 0, speed_units = 'mph') 291.80148048806217 Determine the true Air Speed for 250 mph CAS at 10,000 ft with temperature of 0 deg F: >>> cas2tas(250, 10000, 0, speed_units = 'mph', temp_units = 'F') 282.14588227473797 \"\"\" if temp == \"std\": temp = SA.alt2temp(altitude, temp_units=temp_units, alt_units=alt_units) dp = tas2dp( tas, altitude, temp, speed_units, alt_units=alt_units, temp_units=temp_units, ) cas = dp2cas(dp, speed_units=speed_units) return cas","title":"TAS to CAS"},{"location":"airspeed/#interactive-tas-to-cas","text":"def i_tas2cas(data_items): \"\"\" Return the CAS for a given TAS, pressure altitude and temp, with interactive input from the user. The speed units may be 'kt', 'mph', 'km/h', 'm/s' and 'ft/s'. The altitude may be in feet ('ft'), metres ('m'), kilometres ('km'), statute miles, ('sm') or nautical miles ('nm'). The temperature may be in deg C, F, K or R. The temperature defaults to std temperature if it is not input. If the units are not specified, the units in default_units.py are used. \"\"\" data_items[\"tas\"] = _get_TAS(data_items) tas = data_items[\"tas\"] data_items[\"speed_units\"] = _get_speed_units(data_items) speed_units = data_items[\"speed_units\"] data_items[\"altitude\"] = _get_alt(data_items) altitude = data_items[\"altitude\"] data_items[\"alt_units\"] = _get_alt_units(data_items) alt_units = data_items[\"alt_units\"] data_items[\"temp_units\"] = _get_temp_units(data_items) temp_units = data_items[\"temp_units\"] data_items[\"temp\"] = _get_temp(data_items) temp = data_items[\"temp\"] print() print(\"TAS = \", tas, speed_units) print(\"Altitude = \", altitude, alt_units) print(\"Temperature = \", temp, \"deg\", temp_units) print() cas = tas2cas(tas, altitude, temp, speed_units, alt_units, temp_units,) data_items[\"cas\"] = cas return_string = \"CAS = \" + str(cas) + \" \" + speed_units print(return_string)","title":"interactive TAS to CAS"},{"location":"airspeed/#tas-to-eas","text":"def tas2eas( tas, altitude, temp=\"std\", speed_units=default_speed_units, alt_units=default_alt_units, temp_units=default_temp_units, ): \"\"\" Return the EAS for a given TAS, pressure altitude and temperature. The speed units may be 'kt', 'mph', 'km/h', 'm/s' and 'ft/s'. The altitude may be in feet ('ft'), metres ('m'), kilometres ('km'), statute miles, ('sm') or nautical miles ('nm'). The temperature may be in deg C, F, K or R. The temperature defaults to std temperature if it is not input. If the units are not specified, the units in default_units.py are used. \"\"\" if temp == \"std\": temp = SA.alt2temp(altitude, temp_units=temp_units, alt_units=alt_units) dp = tas2dp( tas, altitude, temp, speed_units, alt_units=alt_units, temp_units=temp_units, ) eas = dp2eas(dp, altitude, alt_units=alt_units, speed_units=speed_units) return eas","title":"TAS to EAS"},{"location":"airspeed/#interactive-tas-to-eas","text":"def i_tas2eas(data_items): \"\"\" Return the EAS for a given TAS, pressure altitude and temp, with interactive input from the user. The speed units may be 'kt', 'mph', 'km/h', 'm/s' and 'ft/s'. The altitude may be in feet ('ft'), metres ('m'), kilometres ('km'), statute miles, ('sm') or nautical miles ('nm'). The temperature may be in deg C, F, K or R. The temperature defaults to std temperature if it is not input. If the units are not specified, the units in default_units.py are used. \"\"\" data_items[\"tas\"] = _get_TAS(data_items) tas = data_items[\"tas\"] data_items[\"speed_units\"] = _get_speed_units(data_items) speed_units = data_items[\"speed_units\"] data_items[\"altitude\"] = _get_alt(data_items) altitude = data_items[\"altitude\"] data_items[\"alt_units\"] = _get_alt_units(data_items) alt_units = data_items[\"alt_units\"] data_items[\"temp_units\"] = _get_temp_units(data_items) temp_units = data_items[\"temp_units\"] data_items[\"temp\"] = _get_temp(data_items) temp = data_items[\"temp\"] print() print(\"TAS = \", tas, speed_units) print(\"Altitude = \", altitude, alt_units) print(\"Temperature = \", temp, \"deg\", temp_units) print() eas = tas2eas(tas, altitude, temp, speed_units, alt_units, temp_units,) data_items[\"eas\"] = eas return_string = \"EAS = \" + str(eas) + \" \" + speed_units print(return_string)","title":"interactive TAS to EAS"},{"location":"airspeed/#delta-p-over-p-to-mach","text":"def dp_over_p2mach(dp_over_p): \"\"\" Return the mach number for a given delta p over p. Mach must be less than or equal to 10. \"\"\" # mach = (5*( (dp_over_p + 1)**(2/7.) -1) )**0.5 mach = M.sqrt(5.0 * ((dp_over_p + 1.0) ** (2.0 / 7.0) - 1.0)) if mach <= 1.0: return mach else: # supersonic case - need to iterate a solution. Set upper and lower # guesses, and iterate until we zero in on a mach that produces the # desired result. dp_over_p_seek = dp_over_p low = 1.0 # initial lower guess for mach # This function works up to Mach 10 The upper limit can be # extended by increasing the value of the initial upper guess # (\"high\"). high = 10 # initial upper guess for mach # confirm initial low and high are OK: dp_over_p_low = mach2dp_over_p(low) if dp_over_p_low > dp_over_p_seek: raise ValueError(\"Initial lower mach guess is too high.\") dp_over_p_high = mach2dp_over_p(high) if dp_over_p_high < dp_over_p_seek: raise ValueError(\"Initial upper mach guess is too low.\") guess = (low + high) / 2.0 dp_over_p_guess = mach2dp_over_p(guess) # keep iterating until dp is within 0.001% of desired value while M.fabs(dp_over_p_guess - dp_over_p_seek) / dp_over_p_seek > 1e-5: if dp_over_p_guess > dp_over_p_seek: high = guess else: low = guess guess = (low + high) / 2.0 dp_over_p_guess = mach2dp_over_p(guess) return guess","title":"delta p over p to Mach"},{"location":"airspeed/#mach-to-delta-p-over-p","text":"def mach2dp_over_p(M): \"\"\" Return the delta p over p for a given mach number. The result is equal to: (pitot pressure - static pressure) / static pressure Example - determine the delta p over p at mach 0.4: >>> mach2dp_over_p(.4) 0.11655196580975336 \"\"\" if M <= 1.0: dp_over_p = (M ** 2.0 / 5.0 + 1.0) ** 3.5 - 1.0 else: dp_over_p = (F * M ** 7.0) / (7.0 * M ** 2.0 - 1.0) ** 2.5 - 1.0 return dp_over_p","title":"Mach to delta p over p"},{"location":"airspeed/#conversions-between-cas-mach-and-altitude","text":"NB: pick any two values, and find the third def cas_mach2alt( cas, mach, speed_units=default_speed_units, alt_units=default_alt_units, ): \"\"\" Return the altitude that corresponds to a given CAS and mach. The speed units may be 'kt', 'mph', 'km/h', 'm/s' and 'ft/s'. The altitude may be in feet ('ft'), metres ('m'), kilometres ('km'), statute miles, ('sm') or nautical miles ('nm'). If the units are not specified, the units in default_units.py are used. \"\"\" dp = cas2dp(cas, speed_units=speed_units, press_units=\"pa\") dp_over_p = mach2dp_over_p(mach) p = dp / dp_over_p altitude = SA.press2alt(p, press_units=\"pa\", alt_units=alt_units) return altitude def i_cas_mach2alt(data_items): \"\"\" Return the altitude that corresponds to a given CAS and mach, with an interactive interface. \"\"\" data_items[\"cas\"] = _get_CAS(data_items) cas = data_items[\"cas\"] data_items[\"speed_units\"] = _get_speed_units(data_items) speed_units = data_items[\"speed_units\"] data_items[\"mach\"] = _get_mach(data_items) mach = data_items[\"mach\"] data_items[\"alt_units\"] = _get_alt_units(data_items) alt_units = data_items[\"alt_units\"] print() print(\"CAS = \", cas, speed_units) print(\"Mach = \", mach) # print 'Desired altitude units are: ', alt_units print() alt = cas_mach2alt(cas, mach, speed_units, alt_units) data_items[\"altitude\"] = alt return_string = \"Altitude = \" + str(alt) + \" \" + alt_units print(return_string) def cas_alt2mach( cas, altitude, speed_units=default_speed_units, alt_units=default_alt_units, ): \"\"\" Return the mach that corresponds to a given CAS and altitude. The speed units may be 'kt', 'mph', 'km/h', 'm/s' and 'ft/s'. The altitude may be in feet ('ft'), metres ('m'), kilometres ('km'), statute miles, ('sm') or nautical miles ('nm'). If the units are not specified, the units in default_units.py are used. \"\"\" dp = cas2dp(cas, speed_units=speed_units, press_units=\"pa\") p = SA.alt2press(altitude, alt_units=alt_units, press_units=\"pa\") dp_over_p = dp / p mach = dp_over_p2mach(dp_over_p) return mach def i_cas_alt2mach(data_items): \"\"\" Return the mach that corresponds to a given CAS and altitude, using an interactive interface. \"\"\" data_items[\"cas\"] = _get_CAS(data_items) cas = data_items[\"cas\"] data_items[\"speed_units\"] = _get_speed_units(data_items) speed_units = data_items[\"speed_units\"] data_items[\"altitude\"] = _get_alt(data_items) altitude = data_items[\"altitude\"] data_items[\"alt_units\"] = _get_alt_units(data_items) alt_units = data_items[\"alt_units\"] print() print(\"CAS = \", cas, speed_units) print(\"Altitude = \", altitude, alt_units) print() mach = cas_alt2mach(cas, altitude, speed_units, alt_units) data_items[\"mach\"] = mach print(\"Mach = \", mach) def \\_cas_alt2mach2( cas, altitude, speed_units=default_speed_units, alt_units=default_alt_units, ): \"\"\" Alternative, trial variant of cas_alt2mach, using the equations from USAF TPS notes. The speed units may be 'kt', 'mph', 'km/h', 'm/s' and 'ft/s'. The altitude may be in feet ('ft'), metres ('m'), kilometres ('km'), statute miles, ('sm') or nautical miles ('nm'). If the units are not specified, the units in default_units.py are used. \"\"\" PR = SA.alt2press_ratio(altitude, alt_units) cas = U.speed_conv(cas, from_units=speed_units, to_units=\"m/s\") if cas <= A0: # <= 661.48 kt mach = M.sqrt( 5.0 * ( ((1.0 / PR) * ((1.0 + 0.2 * (cas / A0) ** 2.0) ** 3.5 - 1.0) + 1.0) ** (2.0 / 7.0) - 1.0 ) ) else: raise ValueError(\"CAS too high.\") return mach def mach_alt2cas( mach, altitude, alt_units=default_alt_units, speed_units=default_speed_units, ): \"\"\" Return the calibrated Air Speed that corresponds to a given mach and altitude. The speed units may be 'kt', 'mph', 'km/h', 'm/s' and 'ft/s'. The altitude may be in feet ('ft'), metres ('m'), kilometres ('km'), statute miles, ('sm') or nautical miles ('nm'). If the units are not specified, the units in default_units.py are used. \"\"\" p = SA.alt2press(altitude, alt_units=alt_units, press_units=\"pa\") dp_over_p = mach2dp_over_p(mach) dp = dp_over_p * p cas = dp2cas(dp, press_units=\"pa\", speed_units=speed_units) return cas def i_mach_alt2cas(data_items): \"\"\" Return the calibrated Air Speed that corresponds to a given mach and altitude, using an interactive interface. \"\"\" data_items[\"mach\"] = _get_mach(data_items) mach = data_items[\"mach\"] data_items[\"altitude\"] = _get_alt(data_items) altitude = data_items[\"altitude\"] data_items[\"alt_units\"] = _get_alt_units(data_items) alt_units = data_items[\"alt_units\"] data_items[\"speed_units\"] = _get_speed_units(data_items) speed_units = data_items[\"speed_units\"] print() print(\"Altitude = \", altitude, alt_units) print(\"Mach = \", mach) print() cas = mach_alt2cas(mach, altitude, alt_units, speed_units) data_items[\"cas\"] = cas return_string = \"CAS = \" + str(cas) + \" \" + speed_units print(return_string)","title":"conversions between cas, mach and altitude"},{"location":"airspeed/#_1","text":"","title":""},{"location":"airspeed/#mach-and-temperature-to-tas","text":"def mach2tas( mach, temp=\"std\", altitude=\"blank\", temp_units=default_temp_units, alt_units=default_alt_units, speed_units=default_speed_units, ): \"\"\" Return the TAS for a given mach number. The temperature or altitude must also be specified. If the altitude is specified, the temperature is assumed to be standard. If both the altitude and temperature are specified, the altitude input is ignored. The speed units may be 'kt', 'mph', 'km/h', 'm/s' and 'ft/s'. The altitude may be in feet ('ft'), metres ('m'), kilometres ('km'), statute miles, ('sm') or nautical miles ('nm'). The temperature may be in deg C, F, K or R. The temperature defaults to std temperature if it is not input. If the units are not specified, the units in default_units.py are used. Examples: Determine the TAS in kt at 0.8 mach at a temperature of -15 deg C: >>> mach2tas(0.8, -15) 500.87884108468597 Determine the TAS in kt at 0.8 mach at 30,000 ft, assuming standard temperature: >>> mach2tas(0.8, altitude = 30000) 471.45798523415107 Determine the TAS in mph at 0.8 mach at 5000 m, assuming standard temperature: >>> mach2tas(0.8, altitude = 5000, alt_units = 'm', speed_units = 'mph') 573.60326790383715 Determine the TAS in km/h at 0.4 mach at a temperature of 300 deg K: >>> mach2tas(0.4, 300, temp_units = 'K', speed_units = 'km/h') 499.99796329569176 \"\"\" if temp == \"std\": if altitude != \"blank\": temp = SA.alt2temp(altitude, temp_units=temp_units, alt_units=alt_units) else: raise ValueError( \"At least one of the temperature or altitude must be specified.\" ) tas = mach * SA.temp2speed_of_sound(temp, temp_units, speed_units) return tas","title":"Mach and temperature to TAS"},{"location":"airspeed/#interactive-mach-and-temperature-to-tas","text":"def i_mach2tas(data_items): \"\"\" Return the TAS that corresponds to a given Mach, altitude, and temperature using an interactive interface. \"\"\" data_items[\"mach\"] = _get_mach(data_items) mach = data_items[\"mach\"] data_items[\"altitude\"] = _get_alt(data_items) altitude = data_items[\"altitude\"] data_items[\"alt_units\"] = _get_alt_units(data_items) alt_units = data_items[\"alt_units\"] data_items[\"temp_units\"] = _get_temp_units(data_items) temp_units = data_items[\"temp_units\"] data_items[\"temp\"] = _get_temp(data_items) temp = data_items[\"temp\"] data_items[\"speed_units\"] = _get_speed_units(data_items) speed_units = data_items[\"speed_units\"] print() print(\"Mach = \", mach) print(\"Altitude = \", altitude, alt_units) print(\"Temperature =\", temp, temp_units) print() tas = mach2tas(mach, temp, altitude, temp_units, alt_units, speed_units,) data_items[\"tas\"] = tas print(\"TAS = \", tas, speed_units)","title":"interactive Mach and temperature to TAS"},{"location":"airspeed/#tas-and-temperature-to-mach","text":"def tas2mach( tas, temp=\"std\", altitude=\"blank\", temp_units=default_temp_units, alt_units=default_alt_units, speed_units=default_speed_units, ): \"\"\" Return the mach number for a given TAS. The temperature or altitude must also be specified. If the altitude is specified, the temperature is assumed to be standard. If both the altitude and temperature are specified, the altitude input is ignored. The speed units may be 'kt', 'mph', 'km/h', 'm/s' and 'ft/s'. The altitude may be in feet ('ft'), metres ('m'), kilometres ('km'), statute miles, ('sm') or nautical miles ('nm'). The temperature may be in deg C, F, K or R. The temperature defaults to std temperature if it is not input. If the units are not specified, the units in default_units.py are used. Examples: Determine the mach number for a TAS of 500 kt at a temperature of -15 deg C: >>> tas2mach(500, -15) 0.79859632148519943 Determine the mach number for a TAS of 500 kt at a temperature of 0 deg F: >>> tas2mach(500, 0, temp_units = 'F') 0.80292788758764277 Determine the mach number for a TAS of 500 kt at an altitude of 10,000 ft, assuming standard temperature: >>> tas2mach(500, altitude = 10000) 0.78328945665870209 Determine the mach number for a TAS of 400 mph at an altitude of 5000 m, assuming standard temperature: >>> tas2mach(400, altitude = 5000, speed_units = 'mph', alt_units = 'm') 0.55787687746166581 \"\"\" if temp == \"std\": if altitude != \"blank\": temp = SA.alt2temp(altitude, temp_units=temp_units, alt_units=alt_units) else: raise ValueError( \"At least one of the temperature or altitude must be specified.\" ) mach = tas / SA.temp2speed_of_sound(temp, temp_units, speed_units) return mach","title":"TAS and temperature to Mach"},{"location":"airspeed/#interactive-tas-and-temperature-to-mach","text":"def i_tas2mach(data_items): \"\"\" Return the mach that corresponds to a given TAS, altitude, and temperature using an interactive interface. \"\"\" data_items[\"tas\"] = _get_TAS(data_items) tas = data_items[\"tas\"] data_items[\"speed_units\"] = _get_speed_units(data_items) speed_units = data_items[\"speed_units\"] data_items[\"altitude\"] = _get_alt(data_items) altitude = data_items[\"altitude\"] data_items[\"alt_units\"] = _get_alt_units(data_items) alt_units = data_items[\"alt_units\"] data_items[\"temp_units\"] = _get_temp_units(data_items) temp_units = data_items[\"temp_units\"] data_items[\"temp\"] = _get_temp(data_items) temp = data_items[\"temp\"] print() print(\"TAS = \", tas, speed_units) print(\"Altitude = \", altitude, alt_units) print(\"Temperature =\", temp, temp_units) print() mach = tas2mach(tas, temp, altitude, temp_units, alt_units, speed_units,) data_items[\"mach\"] = mach print(\"Mach = \", mach)","title":"interactive TAS and temperature to Mach"},{"location":"airspeed/#ram-temperature-rise-calculations","text":"","title":"Ram temperature rise calculations"},{"location":"airspeed/#mach-and-indicated-temperature-to-ambient-temperature","text":"def mach2temp( mach, indicated_temp, recovery_factor, temp_units=default_temp_units, ): \"\"\" Return the ambient temp, given the mach number, indicated temperature and the temperature probe's recovery factor. The temperature may be in deg C, F, K or R. If the units are not specified, the units in default_units.py are used. Examples: Determine the ambient temperature with an indicated temperature of -20 deg C at mach 0.6 with a probe recovery factor of 0.8: >>> mach2temp(0.6, -20, 0.8) -33.787291981845698 Determine the ambient temperature with an indicated temperature of 75 deg F at mach 0.3 with a probe recovery factor of 0.9: >>> mach2temp(0.3, 75, 0.9, temp_units = 'F') 66.476427868529839 \"\"\" indicated_temp = U.temp_conv(indicated_temp, from_units=temp_units, to_units=\"K\") ambient_temp = indicated_temp / (1.0 + (0.2 * recovery_factor) * mach ** 2.0) ambient_temp = U.temp_conv(ambient_temp, from_units=\"K\", to_units=temp_units) return ambient_temp","title":"Mach and indicated temperature to ambient temperature"},{"location":"airspeed/#tas-and-indicated-temperature-to-ambient-temperature","text":"def tas2temp( tas, indicated_temp, recovery_factor, speed_units=default_speed_units, temp_units=default_temp_units, ): \"\"\" Return the ambient temp, given the TAS, indicated temperature and the temperature probe's recovery factor. The speed units may be 'kt', 'mph', 'km/h', 'm/s' and 'ft/s'. The temperature may be in deg C, F, K or R. The temperature defaults to std temperature if it is not input. If the units are not specified, the units in default_units.py are used. \"\"\" indicated_temp = U.temp_conv(indicated_temp, from_units=temp_units, to_units=\"K\") tas = U.speed_conv(tas, from_units=speed_units, to_units=\"kt\") # value 7592.4732909142658 was adjusted to make the result equal that # obtained using mach2temp ambient_temp = indicated_temp - (recovery_factor * tas ** 2.0) / 7592.4732909142658 ambient_temp = U.temp_conv(ambient_temp, from_units=\"K\", to_units=temp_units) return ambient_temp","title":"TAS and indicated temperature to ambient temperature"},{"location":"conversions/","text":"Area Conversion This module is used to convert areas between various units. Convert area values between ft**2, in**2, m**2, km**2, sm**2 and nm**2. def area_conv(Area, from_units=default_area_units, to_units=default_area_units): \"\"\" NOTE: The incoming value is first converted to ft**2, then it is converted to desired return value. \"\"\" ... return converted area NB: The units default to those specified in default_units.py Examples: Convert 1 ft**2 to inches**2, with ft\\*\\*2 already defined as the default units: > area_conv(1, to_units = 'in**2') 144.0 Convert 288 square inches to square feet, with ft**2 already defined as the default units: > area_conv(288, from_units = 'in\\*\\*2') 2.0 Convert 10 square metres to square inches: > area_conv(1000, from_units = 'm**2', to_units = 'in**2') 1550003.1000061999 Density Conversion This function is used to convert density values between e.g kg/m**3, slug/ft**3 and lb/ft**3. def density_conv(Density, from_units, to_units): \"\"\" The incoming value is first converted to kg/m**3, then it is converted to desired return value. \"\"\" ... return converted_density NB: There are NO default units. Both the from_units and the to_units MUST be specified. Example: Convert 1.225 kg per metre cubed to lb per foot cubed: > density_conv(1.225, from_units = 'kg/m**3', to_units = 'lb/ft**3') 0.076474253491112101 Force Conversion Convert force values between lb and N. def force_conv(Force, from_units=default_weight_units, to_units=default_weight_units): \"\"\" The incoming value is first converted to N, then it is converted to the desired return value. \"\"\" ... return converted_force Length Conversion Convert length values between ft, in, m, km, sm and nm. def len_conv(L, from_units=default_length_units, to_units=default_length_units): \"\"\" The incoming value is first converted to ft, then it is converted to desired return value. The units default to those specified in default_units.py \"\"\" ... return converted_length Examples: Convert 5280 ft to statute miles, with feet already defined as the default units: > len_conv(5280, to_units = 'sm') 1.0 Convert 1 nautical mile to feet, with feet already defined as the default units: > len_conv(1, from_units = 'nm') 6076.1154855643044 Convert 1000 metres to kilometres: > len_conv(1000, from_units = 'm', to_units = 'km') 0.99999999999999989 Power Conversion Convert power values between horsepower, ft-lb/mn, ft-lb/s, watts, kilowatts, BTU/hr and BTU/mn. def power_conv(P, from_units=default_power_units, to_units=default_power_units): \"\"\" The incoming value is first converted to hp, then it is converted to the desired return value. \"\"\" ... return converted_power The units default to those specified in default_units.py Pressure Conversion Convert pressure values between inches of HG, mm of HG, psi, lb/ft^2, hpa and mb. def press_conv(P, from_units=default_press_units, to_units=default_press_units): \"\"\" The incoming value is first converted to Pa, then it is converted to desired return value. The units default to those specified in default_units.py \"\"\" ... return converted_pressure Examples: Convert 1013.25 hpa to default pressure units: > press_conv(1013.25, from_units = 'hpa') 29.921331923765198 Convert 29.9213 default pressure units to mm of HG: > press_conv(29.9213, to_units = 'mm HG') 760.00128931459176 Convert 2116.22 lb per sq. ft to lb per sq. inch: > press_conv(2116.22, from_units = 'psf', to_units = 'psi') 14.695973160069311 Speed Conversion Convert speed values between kt, mph, km/h, m/s and ft/s. def speed_conv(S, from_units=default_speed_units, to_units=default_speed_units): \"\"\" The incoming value is first converted to kt, then it is converted to desired return value. The units default to those specified in default_units.py \"\"\" ... return converted_speed Example: Convert 230 mph to kt: > speed_conv(230, from_units = 'mph', to_units = 'kt') 199.86453563714903 Temperature Conversion Converts absolute temperature values between deg C, F, K and R. NOTE: This function should NOT be used for relative temperature conversions, i.e. temperature differences. def temp_conv(T, from_units=default_temp_units, to_units=default_temp_units): \"\"\" The incoming value is first converted to deg K, then it is converted to desired return value. The units default to those specified in default_units.py \"\"\" return converted_temperature Examples: Convert 32 deg F to deg C, with deg C as the default units: > temp_conv(32, from_units = 'F') > 0.0 Convert 100 deg C to deg F, with deg C as the default units: > temp_conv(100, to_units = 'F') > 212.0 Convert 59 deg F to deg K > temp_conv(59, from_units = 'F', to_units = 'K') > 288.14999999999998 Volume Conversions Convert volume values between USG, ImpGal (Imperial gallons), l (litres), ft**3, in**3, m**3, km**3, sm**3 and nm**3. def vol_conv(V, from_units=default_vol_units, to_units=default_vol_units): \"\"\" The incoming value is first converted to ft**3, then it is converted to desired return value. The units default to those specified in default_units.py Examples: \"\"\" return converted_volume Convert 1 cubic foot to US gallons, with cubic feet already defined as the default units: > vol_conv(1, to_units = 'USG') 7.4805194804946105 Convert 1 Imperial gallon to cubic feet, with cubic feet already defined as the default units: > vol_conv(1, from_units = 'ImpGal') 0.16054365323600001 Convert 10 US gallon to litres: > vol_conv(10, from_units = 'USG', to_units = 'l') 37.854117840125852 Weight Conversion Convert weight values between lb and kg. Purists will yell that lb is a unit of weight, and kg is a unit of mass. Get over it!!!!! def wt_conv(W, from_units=default_weight_units, to_units=default_weight_units): \"\"\" The incoming value is first converted to kg, then it is converted to the desired return value. The units default to those specified in default_units.py \"\"\" return converted_weight AVGAS Conversion Convert aviation gasoline between units of lb, US Gallon (USG), Imperial Gallon (Imp Gal), litres (l) and kg, assuming nominal density for aviation gasoline of 6.01 lb per USG. Note: it was difficult to find authoritative values for aviation gasoline density. Conventional wisdom is that aviation gasoline has a density of 6 lb/USG. The Canada Flight Supplement provides densities of: temp density density density (deg C) (lb/USG) (lb/ImpGal) (lb/l) -40 6.41 7.68 1.69 -20 6.26 7.50 1.65 0 6.12 7.33 1.62 15 6.01 7.20 1.59 30 5.90 7.07 1.56 However, the Canada Flight Supplement does not provide a source for its density data. And, the values for the different volume units are not completly consistent, as they don't vary by exactly the correct factor. For example, if the density at 15 deg C is 6.01 lb/USG, we would expect the density in lb/ImpGal to be 7.22, (given that 1 ImpGal = 1.201 USG) yet the Canada Flight Supplement has 7.20. The only authoritative source for aviation gasoline density that was found on the web was the \\\"Air BP Handbook of Products\\\" on the British Petroleum (BP) web site: <http://www.bp.com/liveassets/bp_internet/aviation/air_bp/STAGING/local_assets/downloads_pdfs/a/air_bp_products_handbook_04004_1.pdf> It provides the following density data valid at 15 deg C (the BP document only provides density in kg/m**3 - the density in lb/USG were calculated by Kevin Horton): Avgas density density Type (kg/m**3) (lb/USG) 80 690 5.76 100 695 5.80 100LL 715 5.97 The available aviation gasoline specifications do not appear to define an allowable density range. They do define allowable ranges for various parametres of the distillation process - the density of the final product will vary depending on where in the allowable range the refinery is run. Thus there will be some variation in density from refinery to refinery. This function uses the 15 deg C density values provided by BP, with the variation with temperature provided in the Canada Flight Supplement. The grade may be specified as \\\"80\\\", \\\"100\\\" or \\\"100LL\\\". It defaults to \\\"100LL\\\" if it is not specified. def avgas_conv( AG, from_units=default_avgas_units, to_units=default_avgas_units, temp=15, temp_units=\"C\", grade=\"nominal\", ): \"\"\" The units default to those specified in default_units.py The temperature defaults to 15 deg C if it is not specified. \"\"\" return converted_avgas","title":"Conversions"},{"location":"conversions/#area-conversion","text":"This module is used to convert areas between various units. Convert area values between ft**2, in**2, m**2, km**2, sm**2 and nm**2. def area_conv(Area, from_units=default_area_units, to_units=default_area_units): \"\"\" NOTE: The incoming value is first converted to ft**2, then it is converted to desired return value. \"\"\" ... return converted area NB: The units default to those specified in default_units.py","title":"Area Conversion"},{"location":"conversions/#examples","text":"Convert 1 ft**2 to inches**2, with ft\\*\\*2 already defined as the default units: > area_conv(1, to_units = 'in**2') 144.0 Convert 288 square inches to square feet, with ft**2 already defined as the default units: > area_conv(288, from_units = 'in\\*\\*2') 2.0 Convert 10 square metres to square inches: > area_conv(1000, from_units = 'm**2', to_units = 'in**2') 1550003.1000061999","title":"Examples:"},{"location":"conversions/#density-conversion","text":"This function is used to convert density values between e.g kg/m**3, slug/ft**3 and lb/ft**3. def density_conv(Density, from_units, to_units): \"\"\" The incoming value is first converted to kg/m**3, then it is converted to desired return value. \"\"\" ... return converted_density","title":"Density Conversion"},{"location":"conversions/#nb-there-are-no-default-units-both-the-from_units-and-the-to_units-must-be-specified","text":"Example: Convert 1.225 kg per metre cubed to lb per foot cubed: > density_conv(1.225, from_units = 'kg/m**3', to_units = 'lb/ft**3') 0.076474253491112101","title":"NB: There are NO default units. Both the from_units and the to_units MUST be specified."},{"location":"conversions/#force-conversion","text":"Convert force values between lb and N. def force_conv(Force, from_units=default_weight_units, to_units=default_weight_units): \"\"\" The incoming value is first converted to N, then it is converted to the desired return value. \"\"\" ... return converted_force","title":"Force Conversion"},{"location":"conversions/#length-conversion","text":"Convert length values between ft, in, m, km, sm and nm. def len_conv(L, from_units=default_length_units, to_units=default_length_units): \"\"\" The incoming value is first converted to ft, then it is converted to desired return value. The units default to those specified in default_units.py \"\"\" ... return converted_length","title":"Length Conversion"},{"location":"conversions/#examples_1","text":"Convert 5280 ft to statute miles, with feet already defined as the default units: > len_conv(5280, to_units = 'sm') 1.0 Convert 1 nautical mile to feet, with feet already defined as the default units: > len_conv(1, from_units = 'nm') 6076.1154855643044 Convert 1000 metres to kilometres: > len_conv(1000, from_units = 'm', to_units = 'km') 0.99999999999999989","title":"Examples:"},{"location":"conversions/#power-conversion","text":"Convert power values between horsepower, ft-lb/mn, ft-lb/s, watts, kilowatts, BTU/hr and BTU/mn. def power_conv(P, from_units=default_power_units, to_units=default_power_units): \"\"\" The incoming value is first converted to hp, then it is converted to the desired return value. \"\"\" ... return converted_power The units default to those specified in default_units.py","title":"Power Conversion"},{"location":"conversions/#pressure-conversion","text":"Convert pressure values between inches of HG, mm of HG, psi, lb/ft^2, hpa and mb. def press_conv(P, from_units=default_press_units, to_units=default_press_units): \"\"\" The incoming value is first converted to Pa, then it is converted to desired return value. The units default to those specified in default_units.py \"\"\" ... return converted_pressure","title":"Pressure Conversion"},{"location":"conversions/#examples_2","text":"Convert 1013.25 hpa to default pressure units: > press_conv(1013.25, from_units = 'hpa') 29.921331923765198 Convert 29.9213 default pressure units to mm of HG: > press_conv(29.9213, to_units = 'mm HG') 760.00128931459176 Convert 2116.22 lb per sq. ft to lb per sq. inch: > press_conv(2116.22, from_units = 'psf', to_units = 'psi') 14.695973160069311","title":"Examples:"},{"location":"conversions/#speed-conversion","text":"Convert speed values between kt, mph, km/h, m/s and ft/s. def speed_conv(S, from_units=default_speed_units, to_units=default_speed_units): \"\"\" The incoming value is first converted to kt, then it is converted to desired return value. The units default to those specified in default_units.py \"\"\" ... return converted_speed","title":"Speed Conversion"},{"location":"conversions/#example","text":"Convert 230 mph to kt: > speed_conv(230, from_units = 'mph', to_units = 'kt') 199.86453563714903","title":"Example:"},{"location":"conversions/#temperature-conversion","text":"Converts absolute temperature values between deg C, F, K and R. NOTE: This function should NOT be used for relative temperature conversions, i.e. temperature differences. def temp_conv(T, from_units=default_temp_units, to_units=default_temp_units): \"\"\" The incoming value is first converted to deg K, then it is converted to desired return value. The units default to those specified in default_units.py \"\"\" return converted_temperature","title":"Temperature Conversion"},{"location":"conversions/#examples_3","text":"Convert 32 deg F to deg C, with deg C as the default units: > temp_conv(32, from_units = 'F') > 0.0 Convert 100 deg C to deg F, with deg C as the default units: > temp_conv(100, to_units = 'F') > 212.0 Convert 59 deg F to deg K > temp_conv(59, from_units = 'F', to_units = 'K') > 288.14999999999998","title":"Examples:"},{"location":"conversions/#volume-conversions","text":"Convert volume values between USG, ImpGal (Imperial gallons), l (litres), ft**3, in**3, m**3, km**3, sm**3 and nm**3. def vol_conv(V, from_units=default_vol_units, to_units=default_vol_units): \"\"\" The incoming value is first converted to ft**3, then it is converted to desired return value. The units default to those specified in default_units.py Examples: \"\"\" return converted_volume Convert 1 cubic foot to US gallons, with cubic feet already defined as the default units: > vol_conv(1, to_units = 'USG') 7.4805194804946105 Convert 1 Imperial gallon to cubic feet, with cubic feet already defined as the default units: > vol_conv(1, from_units = 'ImpGal') 0.16054365323600001 Convert 10 US gallon to litres: > vol_conv(10, from_units = 'USG', to_units = 'l') 37.854117840125852","title":"Volume Conversions"},{"location":"conversions/#weight-conversion","text":"Convert weight values between lb and kg.","title":"Weight Conversion"},{"location":"conversions/#purists-will-yell-that-lb-is-a-unit-of-weight-and-kg-is-a-unit-of-mass","text":"","title":"Purists will yell that lb is a unit of weight, and kg is a unit of mass."},{"location":"conversions/#get-over-it","text":"def wt_conv(W, from_units=default_weight_units, to_units=default_weight_units): \"\"\" The incoming value is first converted to kg, then it is converted to the desired return value. The units default to those specified in default_units.py \"\"\" return converted_weight","title":"Get over it!!!!!"},{"location":"conversions/#avgas-conversion","text":"Convert aviation gasoline between units of lb, US Gallon (USG), Imperial Gallon (Imp Gal), litres (l) and kg, assuming nominal density for aviation gasoline of 6.01 lb per USG. Note: it was difficult to find authoritative values for aviation gasoline density. Conventional wisdom is that aviation gasoline has a density of 6 lb/USG. The Canada Flight Supplement provides densities of: temp density density density (deg C) (lb/USG) (lb/ImpGal) (lb/l) -40 6.41 7.68 1.69 -20 6.26 7.50 1.65 0 6.12 7.33 1.62 15 6.01 7.20 1.59 30 5.90 7.07 1.56 However, the Canada Flight Supplement does not provide a source for its density data. And, the values for the different volume units are not completly consistent, as they don't vary by exactly the correct factor. For example, if the density at 15 deg C is 6.01 lb/USG, we would expect the density in lb/ImpGal to be 7.22, (given that 1 ImpGal = 1.201 USG) yet the Canada Flight Supplement has 7.20. The only authoritative source for aviation gasoline density that was found on the web was the \\\"Air BP Handbook of Products\\\" on the British Petroleum (BP) web site: <http://www.bp.com/liveassets/bp_internet/aviation/air_bp/STAGING/local_assets/downloads_pdfs/a/air_bp_products_handbook_04004_1.pdf> It provides the following density data valid at 15 deg C (the BP document only provides density in kg/m**3 - the density in lb/USG were calculated by Kevin Horton): Avgas density density Type (kg/m**3) (lb/USG) 80 690 5.76 100 695 5.80 100LL 715 5.97 The available aviation gasoline specifications do not appear to define an allowable density range. They do define allowable ranges for various parametres of the distillation process - the density of the final product will vary depending on where in the allowable range the refinery is run. Thus there will be some variation in density from refinery to refinery. This function uses the 15 deg C density values provided by BP, with the variation with temperature provided in the Canada Flight Supplement. The grade may be specified as \\\"80\\\", \\\"100\\\" or \\\"100LL\\\". It defaults to \\\"100LL\\\" if it is not specified. def avgas_conv( AG, from_units=default_avgas_units, to_units=default_avgas_units, temp=15, temp_units=\"C\", grade=\"nominal\", ): \"\"\" The units default to those specified in default_units.py The temperature defaults to 15 deg C if it is not specified. \"\"\" return converted_avgas","title":"AVGAS Conversion"},{"location":"defaults/","text":"Defines the default units to be used for various modules. default_area_units = 'ft**2' #square feet default_avgas_units = 'lb' #pounds default_density_units = 'lb/ft**3' # pound per cubic feet default_length_units = 'ft' #feet default_power_units = 'hp' #horsepower default_press_units = 'in HG' # inches of mercury default_speed_units = 'kt' #knots default_temp_units = 'C' #celcius default_weight_units = 'lb' default_vol_units = 'ft**3'","title":"Defaults"},{"location":"defaults/#defines-the-default-units-to-be-used-for-various-modules","text":"default_area_units = 'ft**2' #square feet default_avgas_units = 'lb' #pounds default_density_units = 'lb/ft**3' # pound per cubic feet default_length_units = 'ft' #feet default_power_units = 'hp' #horsepower default_press_units = 'in HG' # inches of mercury default_speed_units = 'kt' #knots default_temp_units = 'C' #celcius default_weight_units = 'lb' default_vol_units = 'ft**3'","title":"Defines the default units to be used for various modules."},{"location":"license/","text":"BSD 2-Clause License Copyright (c) 2017, Di Cheng All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"License"}]}